#!/usr/bin/env ruby

$:.unshift(File.expand_path("../../lib", __FILE__))
require 'fog/summary'
require 'yaml'
require 'fog'

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: example.rb [options]"

  opts.on("--skip KEY", "Skip fog providers by key") do |key|
    options[:skip] ||= []
    options[:skip] << key
  end
end.parse!

skip_keys = options[:skip]

fog_file = ENV['FOG_FILE'] || File.expand_path("~/.fog")
fog_connections = YAML.load_file(fog_file)

def provider(credentials)
  return "AWS" if credentials[:aws_access_key_id]
  return "OpenStack" if credentials[:openstack_auth_url]
  nil
end

def label(credentials)
  case provider(credentials)
  when "AWS"
    "AWS (#{credentials[:aws_access_key_id]})"
  when "OpenStack"
    auth_url = credentials[:openstack_auth_url]
    username = credentials[:openstack_username]
    "OpenStack (#{auth_url} / #{username})"
  end
end

def flavors(provider, compute, servers)
  servers && case provider
  when "AWS"
    servers.map(&:flavor_id)
  when "OpenStack"
    servers.map(&:flavor).map do |flavor_info|
      id = flavor_info['id']
      compute.flavors.get(id).name
    end
  end
end

def networking?(fog_network)
  
end

fog_connections.each do |key, credentials|
  next if skip_keys.include?(key.to_s)
  puts ""
  puts "#{key}: #{label(credentials)}"
  provider = provider(credentials)
  begin
    compute = Fog::Compute.new(credentials.merge(provider: provider))
    servers = compute.servers
    flavors = flavors(provider, compute, servers)
    puts "servers: #{servers.size} - #{flavors.join(', ')}"
  rescue StandardError => e
    puts e.message
    next
  end

  begin
    network = Fog::Network.new(credentials.merge(provider: provider))
    subnets = network.subnets.map(&:name)
    puts "subnets: #{subnets.join(', ')}"
  rescue StandardError => e
    puts "Networking: unavailable"
  end
end